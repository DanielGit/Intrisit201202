/**************************************************************************
*                                                                         *
*   PROJECT     : MIPS port for uC/OS-II                                  *
*                                                                         *
*   MODULE      : link.xn                                                 *
*                                                                         *
*   AUTHOR      : Michael Anburaj                                         *
*                 URL  : http://geocities.com/michaelanburaj/             *
*                 EMAIL: michaelanburaj@hotmail.com                       *
*                                                                         *
*   PROCESSOR   : MIPS 4Kc (32 bit RISC) - ATLAS board                    *
*                                                                         *
*   TOOL-CHAIN  : SDE & Cygnus                                            *
*                                                                         *
*   DESCRIPTION :                                                         *
*   Linker script file                                                    *
*                                                                         *
**************************************************************************/
OUTPUT_ARCH(mips)

INCLUDE newsym.lds
MEMORY
{
    ram  (wx) : ORIGIN = 0x803a2000, LENGTH = 640k
    tcsm (wx) : ORIGIN = 0xF4002280, LENGTH = 8K
    h264_cavlc_tcsm (wx) : ORIGIN = 0xF4000000, LENGTH = 8K
    h264_cabac_tcsm (wx) : ORIGIN = 0xF4002000, LENGTH = 8K
    tcsm0_bank3(wx) :ORIGIN = 0xF4003000, LENGTH = 4K
    tcsm0_bank2(wx) :ORIGIN = 0xF4002000, LENGTH = 4K
    vc1_J1_tcsm(wx) :ORIGIN = 0xF4002000, LENGTH = 8K    
 /*   frame (rw) : ORIGIN = 0x81F00000, LENGTH = 1M */
}

SECTIONS
{
  /**** Code and read-only data ****/

  .text :
  {
    _ftext_plugin = ABSOLUTE(.) ;	/* Start of code and read-only data	*/
    *(.text*)
    *(.gnu.linkonce.*)
    *(__libc*)
    *(.rel.dyn)
    _ecode_plugin = ABSOLUTE(.) ;	/* End of code				*/

    *(.rodata*)
    . = ALIGN(8);
    _etext_plugin = ABSOLUTE(.);	/* End of code and read-only data	*/
  } > ram

  .tcsm_text :
  {
    *(.tcsm_text)
  } > tcsm

  .h264_cavlc_tcsm_text :
  {
    *(.h264_cavlc_tcsm_text)
  } > h264_cavlc_tcsm

  .h264_cabac_tcsm_text :
  {
    *(.h264_cabac_tcsm_text)
  } > h264_cabac_tcsm

  .tcsm0_bank2 :
  {
    *(.tcsm0_bank2)
  } > tcsm0_bank2

  .tcsm0_bank3 :
  {
    *(.tcsm0_bank3)
  } > tcsm0_bank3

  .vc1_J1_tcsm_text :
  {
    *(.vc1_J1_tcsm_text)
  } > vc1_J1_tcsm

  /**** Initialised data ****/

  .data :
  {
    _fdata_plugin = ABSOLUTE(.);	/* Start of initialised data		*/
    *(.data*)
    *(.eh_frame*)
    *(.gcc_except_table*)
   
    . = ALIGN(8);
    __CTOR_LIST__ = ABSOLUTE(.);
    KEEP(*(SORT(.ctors*)))
    __CTOR_END__ = ABSOLUTE(.);

   __DTOR_LIST__ = ABSOLUTE(.);
    KEEP(*(SORT(.dtors*)))
    __DTOR_END__ = ABSOLUTE(.);

    _gp = ABSOLUTE(. + 0x7ff0); /* Base of small data			*/

    *(.lit8) 
    *(.lit4) 
    *(.sdata) 

    . = ALIGN(8);

    _edata_plugin  = ABSOLUTE(.);	/* End of initialised data		*/
  } > ram

  /**** Uninitialised data ****/

  _fbss_plugin = .;			/* Start of uninitialised data		*/

  .sbss : 
  { 
    *(.sbss) 
    *(.scommon)
  } > ram
  .bss :
  {
    *(.bss)
    *(COMMON)

    /* Allocate room for stack */
    .   =  ALIGN(8) ;
    _freemem_plugin = .;
  } > ram

  _end_plugin = . ;			/* End of unitialised data		*/

  .gptab.sdata : { *(.gptab.data) *(.gptab.sdata) }
  .gptab.sbss : { *(.gptab.bss) *(.gptab.sbss) }

  /DISCARD/ :
  {
    *(.reginfo)
  }

  PROVIDE(etext = _etext_plugin);
  PROVIDE (edata = .);
  PROVIDE (end = .);
}


