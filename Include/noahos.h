//[PROPERTY]===========================================[PROPERTY]
//            *****  诺亚神舟操作系统V2  *****
//        --------------------------------------
//    	             
//        --------------------------------------
//                 版权: 新诺亚舟科技
//             ---------------------------
//                  版   本   历   史
//        --------------------------------------
//  版本    日前		说明		
//  V0.1    2008-4      Init.             Hisway.Gao
//[PROPERTY]===========================================[PROPERTY]

#ifndef _NOAHOS_V2_H
#define _NOAHOS_V2_H

#include <sys/types.h>
#include <gui/wintype.h>
#include <gui/wingr.h>
#include <font/font.h>
#include <noahos/gdi.h>
#include <noahos/device.h>

#define FS_ATTR_READ_ONLY		0x01
#define FS_ATTR_HIDDEN			0x02
#define FS_ATTR_SYSTEM			0x04
#define FS_ATTR_VOLUME_ID		0x08
#define FS_ATTR_ARCHIVE			0x20
#define FS_ATTR_DIRECTORY		0x10

#define FS_SEEK_CUR				1
#define FS_SEEK_END				2
#define FS_SEEK_SET				0

// 日期结构定义
typedef struct
{
	WORD year;		// 取值范围1900 ~ 2100
	BYTE month;		// 取值范围1~12
	BYTE day;		// 取值范围1~31
}DATE;
typedef DATE *PDATE;

// 时间结构
typedef struct
{
	BYTE hour;		// 取值范围0~23
	BYTE minute;	// 取值范围0~59
	BYTE second;	// 取值范围0~59
}TIME;
typedef TIME *PTIME;

// 闹铃时间结构
typedef struct
{
	WORD year;		// 取值范围1900 ~ 2100
	BYTE month;		// 取值范围1~12
	BYTE day;		// 取值范围1~31
	BYTE hour;		// 取值范围0~23
	BYTE minute;	// 取值范围0~59
}ALARM_DT;
typedef ALARM_DT *PALARM_DT;

typedef struct _ALARM
{
	int	  Enable;		// 闹铃允许1/禁止0
	DWORD Year;			// 取值范围1900 ~ 2100, 其他值表示每年提醒
	DWORD Month;		// Bit0～Bit11有效，分别表示1～12月
	DWORD Day;			// Bit0～Bit30有效，分别表示1～31号。如果此值为0，按星期进行日期匹配
	DWORD Week;			// Bit0～Bit6有效，分别表示星期天、星期一至星期六
	DWORD Hour;			// Bit0～Bit23有效，分别表示0～23时
	DWORD Minute0;		// Bit0～Bit29有效，分别表示0～29分
	DWORD Minute1;		// Bit0～Bit29有效，分别表示30～59分
}ALARM;
typedef ALARM *PALARM;

#ifndef _FS_H
typedef struct
{
	BYTE name[13];
	WORD ctime;
	WORD cdate;
	BYTE attr;
	WORD mtime;
	WORD mdate;
	DWORD size;
	BYTE longname[0x200];
}DIR_ENTRY;
typedef DIR_ENTRY *PDIR_ENTRY;
typedef DIR_ENTRY FILE_ENTRY;
typedef FILE_ENTRY *PFILE_ENTRY;

typedef struct 
{
	DWORD TotalClust;
	DWORD FreeClust;
	WORD SecperClust;
	WORD BytesperSec;
}FS_INFO;
typedef FS_INFO *PFS_INFO;

// 磁盘信息值
typedef struct
{
	BYTE	Volume[12];
	DWORD	Hash;
	DWORD	ID;
	DWORD	CRC32;
	DWORD	DiskSize;
	WORD	Date;
	WORD	Time;
}RFS_INFO;
typedef RFS_INFO *PRFS_INFO;

// 磁盘信息值
typedef struct
{
	BYTE	Volume[32];
	DWORD	CRC32;
	DWORD	DiskSize;
	WORD	Date;
	WORD	Time;
}ISOFS_INFO;
typedef ISOFS_INFO *PISOFS_INFO;
#endif

typedef struct 
{
	DWORD crc;
	DWORD size;
	BYTE  dt[17];
	BYTE  sver[17];
	BYTE  aver[17];
}SYSPACK_INFO;

typedef struct 
{
	DWORD crc;
	DWORD size;
	BYTE  dt[17];
	BYTE  hwver[17];
	BYTE  swver[17];
	BYTE  sn[17];
}BIOSPACK_INFO;

typedef struct _TASK_INFO
{
	HANDLE Handle;
	char   *Name;
	int    MaxLen;
	int	   Handles;
	int	   Threads;
	DWORD  AllocSize;
	HANDLE hMainWnd;
	int	Class;
}TASK_INFO;
typedef TASK_INFO *PTASK_INFO;

typedef void (*CALLBACK_FUNC)(void *);

typedef struct
{
	DWORD calladdr:1;	//umalloc 打印调用函数返回地址
	DWORD size:1;		//umalloc 打印申请内存大小
	DWORD malloc:1;		//umalloc 打印申请得到的内存地址
	DWORD free:1;		//ufree 打印释放的内存地址, 该地址应与上面的地址成对出现, 否则可能出现内存泄漏

	DWORD warnning:1;	//打印警告信息, 警告不会造成死机, 但是不排除在未来会造成死机
	DWORD failed:1;		//内存申请失败(非节点检查错误, 一般是内存不足)时打印这种类型的信息

	DWORD item:1;		//内存节点检查发现问题时打印有问题的节点
	DWORD allitem:1;	//内存节点检查发现问题时打印所有节点
}UPOOL_DEBUGINFO;


//////////////////////////////////////////////////////////////////////////
//函数名称:  CreateProcess
//函数功能:  创建一个进程(在小机平台上)
//输入参数:  program --- 程序的名称(例如c:\\programs\\prog.elf)
//输入参数:  cmdline --- 命令行参数(各个参数以空格分隔)
//输出参数:  无
//返 回 值:  进程句柄(NULL：创建失败，否则成功)
//备    注:  该函数是使用在小机平台
//////////////////////////////////////////////////////////////////////////
HANDLE CreateProcess(const char *program, const char *cmdline);

//////////////////////////////////////////////////////////////////////////
//函数名称:  CreateSimDebugProcess
//函数功能:  创建一个进程(在模拟平台)
//输入参数:  program --- 程序的名称(例如c:\\programs\\prog.elf)
//输入参数:  cmdline --- 命令行参数(各个参数以空格分隔)
//输入参数:  entry   --- 入口函数
//输出参数:  无
//返 回 值:  进程句柄(NULL：创建失败，否则成功)
//备    注:  该函数是使用在模拟平台
//////////////////////////////////////////////////////////////////////////
HANDLE CreateSimDebugProcess(const char *program, const char *cmdline, int(*entry)(int, int, int, char**));

//////////////////////////////////////////////////////////////////////////
//函数名称:  PortCreate
//函数功能:  创建一个端口
//输入参数:  name --- 名称(长度由CONFIG_MAX_PORTNAME决定)
//输出参数:  无
//返 回 值:  端口句柄(NULL：创建失败，否则成功)
//备    注:  进程间通信使用
//////////////////////////////////////////////////////////////////////////
HANDLE	PortCreate(const char *name);

//////////////////////////////////////////////////////////////////////////
//函数名称:  PortDestroy
//函数功能:  销毁一个端口
//输入参数:  hobj --- 端口句柄
//输出参数:  无
//返 回 值:  0:成功; EINVAL或EACCES：失败
//备    注:  1. PORT只能被创建它的任务删除
//           2. 挂载该PORT上的所有消息将被删除
//////////////////////////////////////////////////////////////////////////
int	PortDestroy(HANDLE hobj);

//////////////////////////////////////////////////////////////////////////
//函数名称:  PortLookup
//函数功能:  查询一个端口
//输入参数:  name --- 端口名称
//输出参数:  无
//返 回 值:  端口句柄(NULL：没有该名称的端口，否则有)
//备    注:  
//////////////////////////////////////////////////////////////////////////
HANDLE	PortLookup(const char *name);

//////////////////////////////////////////////////////////////////////////
//函数名称:  MessageSend
//函数功能:  
//输入参数:  
//输出参数:  
//返 回 值:  
//备    注:  
//////////////////////////////////////////////////////////////////////////
int	MessageSend(HANDLE hobj, void *msg, size_t size);

//////////////////////////////////////////////////////////////////////////
//函数名称:  MessageReceive
//函数功能:  
//输入参数:  
//输出参数:  
//返 回 值:  
//备    注:  
//////////////////////////////////////////////////////////////////////////
int	MessageReceive(HANDLE hobj, void *msg, size_t size);

//////////////////////////////////////////////////////////////////////////
//函数名称:  MessageReply
//函数功能:  
//输入参数:  
//输出参数:  
//返 回 值:  
//备    注:  
//////////////////////////////////////////////////////////////////////////
int	MessageReply(HANDLE hobj, void *msg, size_t size);



//////////////////////////////////////////////////////////////////////////
//函数名称:  VmAlloc
//函数功能:  
//输入参数:  
//输出参数:  
//返 回 值:  
//备    注:  
//////////////////////////////////////////////////////////////////////////
int	VmAlloc(HANDLE htask, void **addr, size_t size, int anywhere);

//////////////////////////////////////////////////////////////////////////
//函数名称:  VmRealloc
//函数功能:  
//输入参数:  
//输出参数:  
//返 回 值:  
//备    注:  
//////////////////////////////////////////////////////////////////////////
int	VmRealloc(HANDLE htask, void **addr, size_t size, int anywhere);

//////////////////////////////////////////////////////////////////////////
//函数名称:  VmAllocStack
//函数功能:  
//输入参数:  
//输出参数:  
//返 回 值:  
//备    注:  
//////////////////////////////////////////////////////////////////////////
int	VmAllocStack(HANDLE htask, void **addr, size_t size);

//////////////////////////////////////////////////////////////////////////
//函数名称:  VmFree
//函数功能:  
//输入参数:  
//输出参数:  
//返 回 值:  
//备    注:  
//////////////////////////////////////////////////////////////////////////
int	VmFree(HANDLE htask, void *addr);

//////////////////////////////////////////////////////////////////////////
//函数名称:  VmFreeStack
//函数功能:  
//输入参数:  
//输出参数:  
//返 回 值:  
//备    注:  
//////////////////////////////////////////////////////////////////////////
int	VmFreeStack(HANDLE htask, void *addr);

//////////////////////////////////////////////////////////////////////////
//函数名称:  VmInfo
//函数功能:  
//输入参数:  
//输出参数:  
//返 回 值:  
//备    注:  
//////////////////////////////////////////////////////////////////////////
int VmInfo(HANDLE htask, DWORD *blks, DWORD *alcsz);

//////////////////////////////////////////////////////////////////////////
//函数名称:  VmInfoAll
//函数功能:  
//输入参数:  
//输出参数:  
//返 回 值:  
//备    注:  
//////////////////////////////////////////////////////////////////////////
int VmInfoAll(DWORD *blks, DWORD *alcsz);

//////////////////////////////////////////////////////////////////////////
//函数名称:  KmInfo
//函数功能:  
//输入参数:  
//输出参数:  
//返 回 值:  
//备    注:  
//////////////////////////////////////////////////////////////////////////
int KmInfo(DWORD *blks, DWORD *alcsz);

//////////////////////////////////////////////////////////////////////////
//函数名称:  TaskCreate
//函数功能:  创建一个任务
//输入参数:  hparent --- 任务的父句柄
//输入参数:  vm_option --- 选项(VM_NEW/VM_SHARE/VM_COPY)
//输出参数:  无
//返 回 值:  任务句柄
//备    注:  NULL为创建失败
//////////////////////////////////////////////////////////////////////////
HANDLE	TaskCreate(HANDLE hparent, int vm_option);

//////////////////////////////////////////////////////////////////////////
//函数名称:  TaskTerminate
//函数功能:  终止一个任务
//输入参数:  htask --- 任务句柄
//输出参数:  无
//返 回 值:  0:成功，ESRCH:没有这样的任务
//备    注:  
//////////////////////////////////////////////////////////////////////////
int	TaskTerminate(HANDLE htask);

//////////////////////////////////////////////////////////////////////////
//函数名称: TaskSelf 
//函数功能: 获得当前任务的句柄
//输入参数: 无
//输出参数: 无
//返 回 值: 当前任务的句柄
//备    注:  
//////////////////////////////////////////////////////////////////////////
HANDLE TaskSelf(void);

//////////////////////////////////////////////////////////////////////////
//函数名称: TaskSuspend 
//函数功能: 挂起任务
//输入参数: htask --- 任务句柄
//输出参数: 无
//返 回 值: 0:成功，ESRCH:没有这样的任务,EPERM:操作不允许
//备    注:  
//////////////////////////////////////////////////////////////////////////
int	TaskSuspend(HANDLE htask);

//////////////////////////////////////////////////////////////////////////
//函数名称:  TaskResume
//函数功能:  恢复一个任务
//输入参数:  htask --- 任务句柄
//输出参数:  无
//返 回 值: 0:成功，ESRCH:没有这样的任务,EPERM:操作不允许,EINVAL:无效参数 
//备    注:  
//////////////////////////////////////////////////////////////////////////
int	TaskResume(HANDLE htask);

//////////////////////////////////////////////////////////////////////////
//函数名称:  TaskGetName
//函数功能:  获得当前任务的名称
//输入参数:  name --- 任务名称buffer
//输入参数:  max --- buffer的大小
//输出参数:  无
//返 回 值:  -1：失败，0：成功
//备    注:  
//////////////////////////////////////////////////////////////////////////
int TaskGetName(char *name, int max);

//////////////////////////////////////////////////////////////////////////
//函数名称:  TaskGetMainWnd
//函数功能:  获得任务的主窗体句柄
//输入参数:  htask --- 任务句柄
//输出参数:  无
//返 回 值:  主窗体句柄
//备    注:  如果没有该任务则返回为空
//////////////////////////////////////////////////////////////////////////
HWND TaskGetMainWnd(HANDLE htask);

//////////////////////////////////////////////////////////////////////////
//函数名称:  TaskSetClass
//函数功能:  设置任务的类别
//输入参数:  class --- 类别
//输出参数:  无
//返 回 值:  0:成功
//备    注:  
//////////////////////////////////////////////////////////////////////////
int TaskSetClass(int class);

//////////////////////////////////////////////////////////////////////////
//函数名称:  TaskMultiInst
//函数功能:  
//输入参数:  
//输出参数:  
//返 回 值:  
//备    注:  
//////////////////////////////////////////////////////////////////////////
int TaskMultiInst(int multi);

//////////////////////////////////////////////////////////////////////////
//函数名称:  TaskInfo
//函数功能:  获得任务链中所有任务的信息
//输入参数:  info --- 任务信息结构体指针
//输入参数:  max --- 任务信息结构体可以存放的最大任务数
//输出参数:  无
//返 回 值:  任务数
//备    注:  
//////////////////////////////////////////////////////////////////////////
int	TaskInfo(PTASK_INFO info, int max);

//////////////////////////////////////////////////////////////////////////
//函数名称:  TaskNameEx
//函数功能:  获得任务的名称
//输入参数:  name --- 任务名称buffer
//输入参数:  max --- buffer的大小
//输入参数:  htask --- 任务句柄
//输出参数:  无
//返 回 值:  -1：失败，0：成功
//备    注:  
//////////////////////////////////////////////////////////////////////////
int TaskNameEx(char *name, int max, HANDLE htask);


//////////////////////////////////////////////////////////////////////////
//函数名称:  ThreadCreate
//函数功能:  
//输入参数:  
//输出参数:  
//返 回 值:  
//备    注:  
//////////////////////////////////////////////////////////////////////////
HANDLE ThreadCreate(HANDLE htask);

//////////////////////////////////////////////////////////////////////////
//函数名称:  ThreadTerminate
//函数功能:  
//输入参数:  
//输出参数:  
//返 回 值:  
//备    注:  
//////////////////////////////////////////////////////////////////////////
int	ThreadTerminate(HANDLE hth);

//////////////////////////////////////////////////////////////////////////
//函数名称:  ThreadLoad
//函数功能:  
//输入参数:  
//输出参数:  
//返 回 值:  
//备    注:  
//////////////////////////////////////////////////////////////////////////
int ThreadLoad(HANDLE hth, void (*entry)(void), void *sp, void *stack);

//////////////////////////////////////////////////////////////////////////
//函数名称:  ThreadSelf
//函数功能:  
//输入参数:  
//输出参数:  
//返 回 值:  
//备    注:  
//////////////////////////////////////////////////////////////////////////
HANDLE ThreadSelf(void);

//////////////////////////////////////////////////////////////////////////
//函数名称:  ThreadYield
//函数功能:  
//输入参数:  
//输出参数:  
//返 回 值:  
//备    注:  
//////////////////////////////////////////////////////////////////////////
void ThreadYield(void);

//////////////////////////////////////////////////////////////////////////
//函数名称:  ThreadSuspend
//函数功能:  
//输入参数:  
//输出参数:  
//返 回 值:  
//备    注:  
//////////////////////////////////////////////////////////////////////////
int	ThreadSuspend(HANDLE hth);

//////////////////////////////////////////////////////////////////////////
//函数名称:  ThreadResume
//函数功能:  
//输入参数:  
//输出参数:  
//返 回 值:  
//备    注:  
//////////////////////////////////////////////////////////////////////////
int	ThreadResume(HANDLE hth);

//////////////////////////////////////////////////////////////////////////
//函数名称:  ThreadSchedParam
//函数功能:  
//输入参数:  
//输出参数:  
//返 回 值:  
//备    注:  
//////////////////////////////////////////////////////////////////////////
int ThreadSchedParam(HANDLE hth, int op, int *param);

//////////////////////////////////////////////////////////////////////////
//函数名称:  BeginThread
//函数功能:  
//输入参数:  
//输出参数:  
//返 回 值:  
//备    注:  
//////////////////////////////////////////////////////////////////////////
HANDLE BeginThread(void(*thread)(void*), int stack_size, void *arglist);

//////////////////////////////////////////////////////////////////////////
//函数名称:  BeginThreadEx
//函数功能:  
//输入参数:  
//输出参数:  
//返 回 值:  
//备    注:  
//////////////////////////////////////////////////////////////////////////
HANDLE BeginThreadEx(void(*thread)(void*), int stack_size, void *arglist, DWORD prio);

//////////////////////////////////////////////////////////////////////////
//函数名称:  EndThread
//函数功能:  
//输入参数:  
//输出参数:  
//返 回 值:  
//备    注:  
//////////////////////////////////////////////////////////////////////////
int EndThread(HANDLE hth);

//////////////////////////////////////////////////////////////////////////
//函数名称:  SleepThread
//函数功能:  
//输入参数:  
//输出参数:  
//返 回 值:  
//备    注:  
//////////////////////////////////////////////////////////////////////////
void SleepThread(DWORD ms);


//////////////////////////////////////////////////////////////////////////
//函数名称:  TimerSleep
//函数功能:  
//输入参数:  
//输出参数:  
//返 回 值:  
//备    注:  
//////////////////////////////////////////////////////////////////////////
int	TimerSleep(DWORD delay, DWORD *remain);

//////////////////////////////////////////////////////////////////////////
//函数名称:  TimerAlarm
//函数功能:  
//输入参数:  
//输出参数:  
//返 回 值:  
//备    注:  
//////////////////////////////////////////////////////////////////////////
int	TimerAlarm(DWORD delay, DWORD *remain);

//////////////////////////////////////////////////////////////////////////
//函数名称:  TimerPeriodic
//函数功能:  
//输入参数:  
//输出参数:  
//返 回 值:  
//备    注:  
//////////////////////////////////////////////////////////////////////////
int	TimerPeriodic(HANDLE hth, DWORD start, DWORD period);

//////////////////////////////////////////////////////////////////////////
//函数名称:  TimerWaitPeriod
//函数功能:  
//输入参数:  
//输出参数:  
//返 回 值:  
//备    注:  
//////////////////////////////////////////////////////////////////////////
int	TimerWaitPeriod(void);



//////////////////////////////////////////////////////////////////////////
//函数名称:  ExceptionSetup
//函数功能:  
//输入参数:  
//输出参数:  
//返 回 值:  
//备    注:  
//////////////////////////////////////////////////////////////////////////
int	ExceptionSetup(void (*handler)(int, void *));

//////////////////////////////////////////////////////////////////////////
//函数名称:  ExceptionReturn
//函数功能:  
//输入参数:  
//输出参数:  
//返 回 值:  
//备    注:  
//////////////////////////////////////////////////////////////////////////
int	ExceptionReturn(void *regs);

//////////////////////////////////////////////////////////////////////////
//函数名称:  ExceptionRaise
//函数功能:  
//输入参数:  
//输出参数:  
//返 回 值:  
//备    注:  
//////////////////////////////////////////////////////////////////////////
int	ExceptionRaise(HANDLE htask, int excpt);

//////////////////////////////////////////////////////////////////////////
//函数名称:  ExceptionWait
//函数功能:  
//输入参数:  
//输出参数:  
//返 回 值:  
//备    注:  
//////////////////////////////////////////////////////////////////////////
int	ExceptionWait(int *excpt);


//////////////////////////////////////////////////////////////////////////
//函数名称:  DeviceOpen
//函数功能:  
//输入参数:  
//输出参数:  
//返 回 值:  
//备    注:  
//////////////////////////////////////////////////////////////////////////
HANDLE DeviceOpen(const char *name, int mode);

//////////////////////////////////////////////////////////////////////////
//函数名称:  DeviceClose
//函数功能:  
//输入参数:  
//输出参数:  
//返 回 值:  
//备    注:  
//////////////////////////////////////////////////////////////////////////
int	DeviceClose(HANDLE hdev);

//////////////////////////////////////////////////////////////////////////
//函数名称:  DeviceRead
//函数功能:  
//输入参数:  
//输出参数:  
//返 回 值:  
//备    注:  
//////////////////////////////////////////////////////////////////////////
int	DeviceRead(HANDLE hdev, void *buf, int *count, int blkno);

//////////////////////////////////////////////////////////////////////////
//函数名称:  DeviceWrite
//函数功能:  
//输入参数:  
//输出参数:  
//返 回 值:  
//备    注:  
//////////////////////////////////////////////////////////////////////////
int	DeviceWrite(HANDLE hdev, void *buf, int *count, int blkno);

//////////////////////////////////////////////////////////////////////////
//函数名称:  DeviceIoctl
//函数功能:  
//输入参数:  
//输出参数:  
//返 回 值:  
//备    注:  
//////////////////////////////////////////////////////////////////////////
int	DeviceIoctl(HANDLE hdev, PDEVIO_CTRL ctl);


//////////////////////////////////////////////////////////////////////////
//函数名称:  MutexCreate
//函数功能:  
//输入参数:  
//输出参数:  
//返 回 值:  
//备    注:  
//////////////////////////////////////////////////////////////////////////
HANDLE	MutexCreate(void);

//////////////////////////////////////////////////////////////////////////
//函数名称:  MutexDestroy
//函数功能:  
//输入参数:  
//输出参数:  
//返 回 值:  
//备    注:  
//////////////////////////////////////////////////////////////////////////
int	MutexDestroy(HANDLE hmutex);

//////////////////////////////////////////////////////////////////////////
//函数名称:  MutexTry
//函数功能:  
//输入参数:  
//输出参数:  
//返 回 值:  
//备    注:  
//////////////////////////////////////////////////////////////////////////
int	MutexTry(HANDLE hmutex);

//////////////////////////////////////////////////////////////////////////
//函数名称:  MutexWait
//函数功能:  
//输入参数:  
//输出参数:  
//返 回 值:  
//备    注:  
//////////////////////////////////////////////////////////////////////////
int	MutexWait(HANDLE hmutex);

//////////////////////////////////////////////////////////////////////////
//函数名称:  MutexRelease
//函数功能:  
//输入参数:  
//输出参数:  
//返 回 值:  
//备    注:  
//////////////////////////////////////////////////////////////////////////
int	MutexRelease(HANDLE hmutex);



//////////////////////////////////////////////////////////////////////////
//函数名称:  
//函数功能:  
//输入参数:  
//输出参数:  
//返 回 值:  
//备    注:  
//////////////////////////////////////////////////////////////////////////
HANDLE	CondCreate(void);

//////////////////////////////////////////////////////////////////////////
//函数名称:  
//函数功能:  
//输入参数:  
//输出参数:  
//返 回 值:  
//备    注:  
//////////////////////////////////////////////////////////////////////////
int	CondDestroy(HANDLE hcond);

//////////////////////////////////////////////////////////////////////////
//函数名称:  
//函数功能:  
//输入参数:  
//输出参数:  
//返 回 值:  
//备    注:  
//////////////////////////////////////////////////////////////////////////
int	CondWait(HANDLE hcond, int trig);

//////////////////////////////////////////////////////////////////////////
//函数名称:  
//函数功能:  
//输入参数:  
//输出参数:  
//返 回 值:  
//备    注:  
//////////////////////////////////////////////////////////////////////////
int	CondRelease(HANDLE hcond);



//////////////////////////////////////////////////////////////////////////
//函数名称:  
//函数功能:  
//输入参数:  
//输出参数:  
//返 回 值:  
//备    注:  
//////////////////////////////////////////////////////////////////////////
HANDLE	SemaCreate(DWORD value);

//////////////////////////////////////////////////////////////////////////
//函数名称:  
//函数功能:  
//输入参数:  
//输出参数:  
//返 回 值:  
//备    注:  
//////////////////////////////////////////////////////////////////////////
int	SemaDestroy(HANDLE hsem);

//////////////////////////////////////////////////////////////////////////
//函数名称:  
//函数功能:  
//输入参数:  
//输出参数:  
//返 回 值:  
//备    注:  
//////////////////////////////////////////////////////////////////////////
int	SemaWait(HANDLE hsem, DWORD timeout);

//////////////////////////////////////////////////////////////////////////
//函数名称:  
//函数功能:  
//输入参数:  
//输出参数:  
//返 回 值:  
//备    注:  
//////////////////////////////////////////////////////////////////////////
int	SemaTry(HANDLE hsem);

//////////////////////////////////////////////////////////////////////////
//函数名称:  
//函数功能:  
//输入参数:  
//输出参数:  
//返 回 值:  
//备    注:  
//////////////////////////////////////////////////////////////////////////
int	SemaRelease(HANDLE hsem);

//////////////////////////////////////////////////////////////////////////
//函数名称:  
//函数功能:  
//输入参数:  
//输出参数:  
//返 回 值:  
//备    注:  
//////////////////////////////////////////////////////////////////////////
int	SemaValue(HANDLE hsem);


//////////////////////////////////////////////////////////////////////////
//函数名称:  
//函数功能:  
//输入参数:  
//输出参数:  
//返 回 值:  
//备    注:  
//////////////////////////////////////////////////////////////////////////
int	KernelInfo(int type, void *buf);

//////////////////////////////////////////////////////////////////////////
//函数名称:  
//函数功能:  
//输入参数:  
//输出参数:  
//返 回 值:  
//备    注:  
//////////////////////////////////////////////////////////////////////////
int	KernelTicks(void);


//////////////////////////////////////////////////////////////////////////
//函数名称:  
//函数功能:  
//输入参数:  
//输出参数:  
//返 回 值:  
//备    注:  
//////////////////////////////////////////////////////////////////////////
int KernCallbackWait(HANDLE hcb, void *param);

//////////////////////////////////////////////////////////////////////////
//函数名称:  
//函数功能:  
//输入参数:  
//输出参数:  
//返 回 值:  
//备    注:  
//////////////////////////////////////////////////////////////////////////
int KernCallbackFinish(HANDLE hcb, void *param);

//////////////////////////////////////////////////////////////////////////
//函数名称:  
//函数功能:  
//输入参数:  
//输出参数:  
//返 回 值:  
//备    注:  
//////////////////////////////////////////////////////////////////////////
int KernCallbackDestroy(HANDLE hcb);

//////////////////////////////////////////////////////////////////////////
//函数名称:  
//函数功能:  
//输入参数:  
//输出参数:  
//返 回 值:  
//备    注:  
//////////////////////////////////////////////////////////////////////////
HANDLE KernCallbackCreate(int paramsize, int trig);


//////////////////////////////////////////////////////////////////////////
//函数名称:  
//函数功能:  
//输入参数:  
//输出参数:  
//返 回 值:  
//备    注:  
//////////////////////////////////////////////////////////////////////////
HANDLE KernCallbackSet(CALLBACK_FUNC cb, int paramsize, int trig);

//////////////////////////////////////////////////////////////////////////
//函数名称:  
//函数功能:  
//输入参数:  
//输出参数:  
//返 回 值:  
//备    注:  
//////////////////////////////////////////////////////////////////////////
int KernCallbackRemove(HANDLE hcb);



//////////////////////////////////////////////////////////////////////////
//函数名称:  
//函数功能:  
//输入参数:  
//输出参数:  
//返 回 值:  
//备    注:  
//////////////////////////////////////////////////////////////////////////
HANDLE fsfopen(const char *pname, const char *pmode); 

//////////////////////////////////////////////////////////////////////////
//函数名称:  
//函数功能:  
//输入参数:  
//输出参数:  
//返 回 值:  
//备    注:  
//////////////////////////////////////////////////////////////////////////
int fsfclose(HANDLE hfile); 

//////////////////////////////////////////////////////////////////////////
//函数名称:  
//函数功能:  
//输入参数:  
//输出参数:  
//返 回 值:  
//备    注:  
//////////////////////////////////////////////////////////////////////////
int fsfremove(const char *pname); 

//////////////////////////////////////////////////////////////////////////
//函数名称:  
//函数功能:  
//输入参数:  
//输出参数:  
//返 回 值:  
//备    注:  
//////////////////////////////////////////////////////////////////////////
int fsfseek(HANDLE hfile, long offset, int origin); 

//////////////////////////////////////////////////////////////////////////
//函数名称:  
//函数功能:  
//输入参数:  
//输出参数:  
//返 回 值:  
//备    注:  
//////////////////////////////////////////////////////////////////////////
int fsfeof(HANDLE hfile); 

//////////////////////////////////////////////////////////////////////////
//函数名称:  
//函数功能:  
//输入参数:  
//输出参数:  
//返 回 值:  
//备    注:  
//////////////////////////////////////////////////////////////////////////
long fsftell(HANDLE hfile); 

//////////////////////////////////////////////////////////////////////////
//函数名称:  
//函数功能:  
//输入参数:  
//输出参数:  
//返 回 值:  
//备    注:  
//////////////////////////////////////////////////////////////////////////
long fsfread(void *pbuf, long size, long count, HANDLE hfile); 

//////////////////////////////////////////////////////////////////////////
//函数名称:  
//函数功能:  
//输入参数:  
//输出参数:  
//返 回 值:  
//备    注:  
//////////////////////////////////////////////////////////////////////////
long fsfwrite(const void *pbuf, long size, long count, HANDLE hfile);

//////////////////////////////////////////////////////////////////////////
//函数名称:  
//函数功能:  
//输入参数:  
//输出参数:  
//返 回 值:  
//备    注:  
//////////////////////////////////////////////////////////////////////////
int fsfrename(const char *oldname, const char *newname);

//////////////////////////////////////////////////////////////////////////
//函数名称:  
//函数功能:  
//输入参数:  
//输出参数:  
//返 回 值:  
//备    注:  
//////////////////////////////////////////////////////////////////////////
int fsfmove(const char *oldname, const char *newname);

//////////////////////////////////////////////////////////////////////////
//函数名称:  
//函数功能:  
//输入参数:  
//输出参数:  
//返 回 值:  
//备    注:  
//////////////////////////////////////////////////////////////////////////
long fsfsize(HANDLE fh);

//////////////////////////////////////////////////////////////////////////
//函数名称:  
//函数功能:  
//输入参数:  
//输出参数:  
//返 回 值:  
//备    注:  
//////////////////////////////////////////////////////////////////////////
int fsftrim(const char *pname, long size);

//////////////////////////////////////////////////////////////////////////
//函数名称:  
//函数功能:  
//输入参数:  
//输出参数:  
//返 回 值:  
//备    注:  
//////////////////////////////////////////////////////////////////////////
int fsfproperty(const char *pname, FILE_ENTRY *pentry);


//////////////////////////////////////////////////////////////////////////
//函数名称:  
//函数功能:  
//输入参数:  
//输出参数:  
//返 回 值:  
//备    注:  
//////////////////////////////////////////////////////////////////////////
HANDLE fsdopen(const char *pname); 

//////////////////////////////////////////////////////////////////////////
//函数名称:  
//函数功能:  
//输入参数:  
//输出参数:  
//返 回 值:  
//备    注:  
//////////////////////////////////////////////////////////////////////////
int fsdclose(HANDLE hdir); 

//////////////////////////////////////////////////////////////////////////
//函数名称:  
//函数功能:  
//输入参数:  
//输出参数:  
//返 回 值:  
//备    注:  
//////////////////////////////////////////////////////////////////////////
int fsdread(HANDLE hdir, DIR_ENTRY *pentry); 

//////////////////////////////////////////////////////////////////////////
//函数名称:  
//函数功能:  
//输入参数:  
//输出参数:  
//返 回 值:  
//备    注:  
//////////////////////////////////////////////////////////////////////////
int fsdmake(const char *pname); 

//////////////////////////////////////////////////////////////////////////
//函数名称:  
//函数功能:  
//输入参数:  
//输出参数:  
//返 回 值:  
//备    注:  
//////////////////////////////////////////////////////////////////////////
int fsdremove(const char *pname); 

//////////////////////////////////////////////////////////////////////////
//函数名称:  
//函数功能:  
//输入参数:  
//输出参数:  
//返 回 值:  
//备    注:  
//////////////////////////////////////////////////////////////////////////
int fsdrename(const char *oldname, const char *newname);

//////////////////////////////////////////////////////////////////////////
//函数名称:  
//函数功能:  
//输入参数:  
//输出参数:  
//返 回 值:  
//备    注:  
//////////////////////////////////////////////////////////////////////////
int fsdmove(const char *oldname, const char *newname);

//////////////////////////////////////////////////////////////////////////
//函数名称:  
//函数功能:  
//输入参数:  
//输出参数:  
//返 回 值:  
//备    注:  
//////////////////////////////////////////////////////////////////////////
int fsferror(HANDLE hfile); 

//////////////////////////////////////////////////////////////////////////
//函数名称:  
//函数功能:  
//输入参数:  
//输出参数:  
//返 回 值:  
//备    注:  
//////////////////////////////////////////////////////////////////////////
int fsformat(const char *pname);

//////////////////////////////////////////////////////////////////////////
//函数名称:  
//函数功能:  
//输入参数:  
//输出参数:  
//返 回 值:  
//备    注:  
//////////////////////////////////////////////////////////////////////////
int fsinited(void);

//////////////////////////////////////////////////////////////////////////
//函数名称:  
//函数功能:  
//输入参数:  
//输出参数:  
//返 回 值:  
//备    注:  
//////////////////////////////////////////////////////////////////////////
int FsFormated(const char *pname);

//////////////////////////////////////////////////////////////////////////
//函数名称:  
//函数功能:  
//输入参数:  
//输出参数:  
//返 回 值:  
//备    注:  
//////////////////////////////////////////////////////////////////////////
int fsinfo(const char *pname, FS_INFO *pinfo); 

//////////////////////////////////////////////////////////////////////////
//函数名称:  
//函数功能:  
//输入参数:  
//输出参数:  
//返 回 值:  
//备    注:  
//////////////////////////////////////////////////////////////////////////
int rfs_info(const char *pname, RFS_INFO *pinfo); 


//////////////////////////////////////////////////////////////////////////
//函数名称:  
//函数功能:  
//输入参数:  
//输出参数:  
//返 回 值:  
//备    注:  
//////////////////////////////////////////////////////////////////////////
int BiosPackageCrcCheck(void);

//////////////////////////////////////////////////////////////////////////
//函数名称:  
//函数功能:  
//输入参数:  
//输出参数:  
//返 回 值:  
//备    注:  
//////////////////////////////////////////////////////////////////////////
int SysPackageCrcCheck(void);

//////////////////////////////////////////////////////////////////////////
//函数名称:  
//函数功能:  
//输入参数:  
//输出参数:  
//返 回 值:  
//备    注:  
//////////////////////////////////////////////////////////////////////////
int BiosPackageInfo(BIOSPACK_INFO *info);

//////////////////////////////////////////////////////////////////////////
//函数名称:  
//函数功能:  
//输入参数:  
//输出参数:  
//返 回 值:  
//备    注:  
//////////////////////////////////////////////////////////////////////////
int SysPackageInfo(SYSPACK_INFO *info);

//////////////////////////////////////////////////////////////////////////
//函数名称:  
//函数功能:  
//输入参数:  
//输出参数:  
//返 回 值:  
//备    注:  
//////////////////////////////////////////////////////////////////////////
int FsLowFormat(int *percent);

//////////////////////////////////////////////////////////////////////////
//函数名称:  
//函数功能:  
//输入参数:  
//输出参数:  
//返 回 值:  
//备    注:  
//////////////////////////////////////////////////////////////////////////
int RomReadRandom(long addr, long size, BYTE* buf);

//////////////////////////////////////////////////////////////////////////
//函数名称:  
//函数功能:  
//输入参数:  
//输出参数:  
//返 回 值:  
//备    注:  
//////////////////////////////////////////////////////////////////////////
int NandReadId(BYTE *id);

//////////////////////////////////////////////////////////////////////////
//函数名称:  
//函数功能:  
//输入参数:  
//输出参数:  
//返 回 值:  
//备    注:  
//////////////////////////////////////////////////////////////////////////
int LibPackageCrcCheck(int *per, int *stat);

//////////////////////////////////////////////////////////////////////////
//函数名称:  
//函数功能:  
//输入参数:  
//输出参数:  
//返 回 值:  
//备    注:  
//////////////////////////////////////////////////////////////////////////
int IsoPackageCrcCheck(int *per, int *stat);

//////////////////////////////////////////////////////////////////////////
//函数名称: IsSysFile 
//函数功能: 判断文件是否为系统文件 
//输入参数: name --- 文件名称
//输入参数: offset --- 数据的开始位置
//输出参数:  
//返 回 值: 0:是，小于0:不是
//备    注: 如果是单独的文件，offset传0，否则则是系统文件的开始位置 
//////////////////////////////////////////////////////////////////////////
int IsSysFile(const char *name, DWORD offset);

//////////////////////////////////////////////////////////////////////////
//函数名称: IsBiosFile 
//函数功能: 判断文件是否为BIOS文件 
//输入参数: name --- 文件名称
//输入参数: offset --- 数据的开始位置
//输出参数:  
//返 回 值: 0:是，小于0:不是
//备    注: 如果是单独的文件，offset传0，否则则是BIOS文件的开始位置 
//////////////////////////////////////////////////////////////////////////
int IsBiosFile(const char *name, DWORD offset);


//////////////////////////////////////////////////////////////////////////
//函数名称:  
//函数功能:  
//输入参数:  
//输出参数:  
//返 回 值:  
//备    注:  
//////////////////////////////////////////////////////////////////////////
void GuiWinApiLock(void);

//////////////////////////////////////////////////////////////////////////
//函数名称:  
//函数功能:  
//输入参数:  
//输出参数:  
//返 回 值:  
//备    注:  
//////////////////////////////////////////////////////////////////////////
void GuiWinApiUnlock(void);

//////////////////////////////////////////////////////////////////////////
//函数名称:  
//函数功能:  
//输入参数:  
//输出参数:  
//返 回 值:  
//备    注:  
//////////////////////////////////////////////////////////////////////////
int GuiIsWinHandle(HWND hwnd);

//////////////////////////////////////////////////////////////////////////
//函数名称:  
//函数功能:  
//输入参数:  
//输出参数:  
//返 回 值:  
//备    注:  
//////////////////////////////////////////////////////////////////////////
int GuiFocusSet(HWND hwnd);

//////////////////////////////////////////////////////////////////////////
//函数名称:  
//函数功能:  
//输入参数:  
//输出参数:  
//返 回 值:  
//备    注:  
//////////////////////////////////////////////////////////////////////////
int GuiFocusIsSet(HWND hwnd);

//////////////////////////////////////////////////////////////////////////
//函数名称:  
//函数功能:  
//输入参数:  
//输出参数:  
//返 回 值:  
//备    注:  
//////////////////////////////////////////////////////////////////////////
HWND GuiFocusGet(void);

//////////////////////////////////////////////////////////////////////////
//函数名称:  
//函数功能:  
//输入参数:  
//输出参数:  
//返 回 值:  
//备    注:  
//////////////////////////////////////////////////////////////////////////
int GuiFocusDisable(HWND hwnd);

//////////////////////////////////////////////////////////////////////////
//函数名称:  
//函数功能:  
//输入参数:  
//输出参数:  
//返 回 值:  
//备    注:  
//////////////////////////////////////////////////////////////////////////
int GuiFocusEnable(HWND hwnd);

//////////////////////////////////////////////////////////////////////////
//函数名称:  
//函数功能:  
//输入参数:  
//输出参数:  
//返 回 值:  
//备    注:  
//////////////////////////////////////////////////////////////////////////
int GuiFocusIsEnable(HWND hwnd);

//////////////////////////////////////////////////////////////////////////
//函数名称:  
//函数功能:  
//输入参数:  
//输出参数:  
//返 回 值:  
//备    注:  
//////////////////////////////////////////////////////////////////////////
HANDLE GuiFocusTask(void);

//////////////////////////////////////////////////////////////////////////
//函数名称:  
//函数功能:  
//输入参数:  
//输出参数:  
//返 回 值:  
//备    注:  
//////////////////////////////////////////////////////////////////////////
int GuiPaintInvalidateWindowEx(HWND hwnd, RECT *rect);

//////////////////////////////////////////////////////////////////////////
//函数名称:  
//函数功能:  
//输入参数:  
//输出参数:  
//返 回 值:  
//备    注:  
//////////////////////////////////////////////////////////////////////////
int GuiPaintInvalidateWindow(HWND hwnd);

//////////////////////////////////////////////////////////////////////////
//函数名称:  
//函数功能:  
//输入参数:  
//输出参数:  
//返 回 值:  
//备    注:  
//////////////////////////////////////////////////////////////////////////
void GuiPaintInvalidateHerit(HWND hwnd);

//////////////////////////////////////////////////////////////////////////
//函数名称:  
//函数功能:  
//输入参数:  
//输出参数:  
//返 回 值:  
//备    注:  
//////////////////////////////////////////////////////////////////////////
void GuiPaintInvalidateScreen(const RECT* rect);

//////////////////////////////////////////////////////////////////////////
//函数名称:  
//函数功能:  
//输入参数:  
//输出参数:  
//返 回 值:  
//备    注:  
//////////////////////////////////////////////////////////////////////////
void GuiPaintListWait(HWND hwnd);

//////////////////////////////////////////////////////////////////////////
//函数名称:  
//函数功能:  
//输入参数:  
//输出参数:  
//返 回 值:  
//备    注:  
//////////////////////////////////////////////////////////////////////////
void GuiPaintListRelease(HWND hwnd);

//////////////////////////////////////////////////////////////////////////
//函数名称:  
//函数功能:  
//输入参数:  
//输出参数:  
//返 回 值:  
//备    注:  
//////////////////////////////////////////////////////////////////////////
int GuiWinRotAllWindows(int ang);

//////////////////////////////////////////////////////////////////////////
//函数名称:  
//函数功能:  
//输入参数:  
//输出参数:  
//返 回 值:  
//备    注:  
//////////////////////////////////////////////////////////////////////////
int GuiWinRotWindowEx(HWND hwnd, RECT *crect, int ang);

//////////////////////////////////////////////////////////////////////////
//函数名称:  
//函数功能:  
//输入参数:  
//输出参数:  
//返 回 值:  
//备    注:  
//////////////////////////////////////////////////////////////////////////
int GuiWinRotWindow(HWND hwnd, int ang);

//////////////////////////////////////////////////////////////////////////
//函数名称:  
//函数功能:  
//输入参数:  
//输出参数:  
//返 回 值:  
//备    注:  
//////////////////////////////////////////////////////////////////////////
DWORD GuiWinRotGetFlag(HWND hwnd);

//////////////////////////////////////////////////////////////////////////
//函数名称:  
//函数功能:  
//输入参数:  
//输出参数:  
//返 回 值:  
//备    注:  
//////////////////////////////////////////////////////////////////////////
int GuiWinRotGetAng(HWND hwnd);

//////////////////////////////////////////////////////////////////////////
//函数名称:  
//函数功能:  
//输入参数:  
//输出参数:  
//返 回 值:  
//备    注:  
//////////////////////////////////////////////////////////////////////////
int GuiWinRotGetAngAbs(HWND hwnd);

//////////////////////////////////////////////////////////////////////////
//函数名称:  
//函数功能:  
//输入参数:  
//输出参数:  
//返 回 值:  
//备    注:  
//////////////////////////////////////////////////////////////////////////
void GuiWinStatusMove(HWND hwnd, int dx, int dy);

//////////////////////////////////////////////////////////////////////////
//函数名称:  
//函数功能:  
//输入参数:  
//输出参数:  
//返 回 值:  
//备    注:  
//////////////////////////////////////////////////////////////////////////
void GuiWinStatusMoveTo(HWND hwnd, int x, int y);

//////////////////////////////////////////////////////////////////////////
//函数名称:  
//函数功能:  
//输入参数:  
//输出参数:  
//返 回 值:  
//备    注:  
//////////////////////////////////////////////////////////////////////////
void GuiWinStatusResize(HWND hwnd, RECT *rect);

//////////////////////////////////////////////////////////////////////////
//函数名称:  
//函数功能:  
//输入参数:  
//输出参数:  
//返 回 值:  
//备    注:  
//////////////////////////////////////////////////////////////////////////
void GuiWinStatusGetRect(HWND hwnd, RECT *rect);

//////////////////////////////////////////////////////////////////////////
//函数名称:  
//函数功能:  
//输入参数:  
//输出参数:  
//返 回 值:  
//备    注:  
//////////////////////////////////////////////////////////////////////////
void GuiWinStatusGetAbsRect(HWND hwnd, RECT *rect);

//////////////////////////////////////////////////////////////////////////
//函数名称:  
//函数功能:  
//输入参数:  
//输出参数:  
//返 回 值:  
//备    注:  
//////////////////////////////////////////////////////////////////////////
int GuiWinStatusIsTop(HWND hwnd);

//////////////////////////////////////////////////////////////////////////
//函数名称:  
//函数功能:  
//输入参数:  
//输出参数:  
//返 回 值:  
//备    注:  
//////////////////////////////////////////////////////////////////////////
int GuiWinStatusIsTopSibling(HWND hwnd);

//////////////////////////////////////////////////////////////////////////
//函数名称:  
//函数功能:  
//输入参数:  
//输出参数:  
//返 回 值:  
//备    注:  
//////////////////////////////////////////////////////////////////////////
int GuiWinStatusIsBottom(HWND hwnd);

//////////////////////////////////////////////////////////////////////////
//函数名称:  
//函数功能:  
//输入参数:  
//输出参数:  
//返 回 值:  
//备    注:  
//////////////////////////////////////////////////////////////////////////
int GuiWinStatusIsBottomSibling(HWND hwnd);

//////////////////////////////////////////////////////////////////////////
//函数名称:  
//函数功能:  
//输入参数:  
//输出参数:  
//返 回 值:  
//备    注:  
//////////////////////////////////////////////////////////////////////////
int GuiWinStatusBringTop(HWND hwnd);

//////////////////////////////////////////////////////////////////////////
//函数名称:  
//函数功能:  
//输入参数:  
//输出参数:  
//返 回 值:  
//备    注:  
//////////////////////////////////////////////////////////////////////////
int GuiWinStatusBringBottom(HWND hwnd);

//////////////////////////////////////////////////////////////////////////
//函数名称:  
//函数功能:  
//输入参数:  
//输出参数:  
//返 回 值:  
//备    注:  
//////////////////////////////////////////////////////////////////////////
int GuiWinStatusBringUp(HWND hwnd);

//////////////////////////////////////////////////////////////////////////
//函数名称:  
//函数功能:  
//输入参数:  
//输出参数:  
//返 回 值:  
//备    注:  
//////////////////////////////////////////////////////////////////////////
int GuiWinStatusBringDown(HWND hwnd);

//////////////////////////////////////////////////////////////////////////
//函数名称:  
//函数功能:  
//输入参数:  
//输出参数:  
//返 回 值:  
//备    注:  
//////////////////////////////////////////////////////////////////////////
int GuiWinStatusShow(HWND hwnd, int show);

//////////////////////////////////////////////////////////////////////////
//函数名称:  
//函数功能:  
//输入参数:  
//输出参数:  
//返 回 值:  
//备    注:  
//////////////////////////////////////////////////////////////////////////
int GuiWinStatusIsShow(HWND hwnd);

//////////////////////////////////////////////////////////////////////////
//函数名称:  
//函数功能:  
//输入参数:  
//输出参数:  
//返 回 值:  
//备    注:  
//////////////////////////////////////////////////////////////////////////
int GuiWinStatusMinimize(HWND hwnd, int min);

//////////////////////////////////////////////////////////////////////////
//函数名称:  
//函数功能:  
//输入参数:  
//输出参数:  
//返 回 值:  
//备    注:  
//////////////////////////////////////////////////////////////////////////
int GuiWinStatusIsMinimize(HWND hwnd);

//////////////////////////////////////////////////////////////////////////
//函数名称:  
//函数功能:  
//输入参数:  
//输出参数:  
//返 回 值:  
//备    注:  
//////////////////////////////////////////////////////////////////////////
int GuiWinStatusTrans(HWND hwnd, int trans);

//////////////////////////////////////////////////////////////////////////
//函数名称:  
//函数功能:  
//输入参数:  
//输出参数:  
//返 回 值:  
//备    注:  
//////////////////////////////////////////////////////////////////////////
int GuiWinStatusIsTrans(HWND hwnd);

//////////////////////////////////////////////////////////////////////////
//函数名称:  
//函数功能:  
//输入参数:  
//输出参数:  
//返 回 值:  
//备    注:  
//////////////////////////////////////////////////////////////////////////
int GuiWinStatusEnable(HWND hwnd, int enable);

//////////////////////////////////////////////////////////////////////////
//函数名称:  
//函数功能:  
//输入参数:  
//输出参数:  
//返 回 值:  
//备    注:  
//////////////////////////////////////////////////////////////////////////
int GuiWinStatusIsEnable(HWND hwnd);

//////////////////////////////////////////////////////////////////////////
//函数名称:  
//函数功能:  
//输入参数:  
//输出参数:  
//返 回 值:  
//备    注:  
//////////////////////////////////////////////////////////////////////////
int GuiWinStatusMsgQ(HWND hwnd);

//////////////////////////////////////////////////////////////////////////
//函数名称:  
//函数功能:  
//输入参数:  
//输出参数:  
//返 回 值:  
//备    注:  
//////////////////////////////////////////////////////////////////////////
int GuiWinStatusModal(HWND hwnd);

//////////////////////////////////////////////////////////////////////////
//函数名称:  
//函数功能:  
//输入参数:  
//输出参数:  
//返 回 值:  
//备    注:  
//////////////////////////////////////////////////////////////////////////
DWORD GuiWinStatusGetFlag(HWND hwnd, DWORD flag);

//////////////////////////////////////////////////////////////////////////
//函数名称:  
//函数功能:  
//输入参数:  
//输出参数:  
//返 回 值:  
//备    注:  
//////////////////////////////////////////////////////////////////////////
int GuiWinStatusGrayBut(HWND hwnd);

//////////////////////////////////////////////////////////////////////////
//函数名称:  
//函数功能:  
//输入参数:  
//输出参数:  
//返 回 值:  
//备    注:  
//////////////////////////////////////////////////////////////////////////
int GuiWinStatusColorAll(void);

//////////////////////////////////////////////////////////////////////////
//函数名称:  GuiWinStatusGetLcdSize
//函数功能:  获取LCD的宽度和高度
//输入参数:  type --- 0:取宽度, 1:取高度
//输出参数:  无
//返 回 值:  宽度或高度
//备    注:  
//////////////////////////////////////////////////////////////////////////
int GuiWinStatusGetLcdSize(char type);

//////////////////////////////////////////////////////////////////////////
//函数名称:  
//函数功能:  
//输入参数:  
//输出参数:  
//返 回 值:  
//备    注:  
//////////////////////////////////////////////////////////////////////////
int GuiWinStatusIsTvOut(void);

//////////////////////////////////////////////////////////////////////////
//函数名称:  
//函数功能:  
//输入参数:  
//输出参数:  
//返 回 值:  
//备    注:  
//////////////////////////////////////////////////////////////////////////
HWND GuiWinSetGridShortArea(char* flag, HWND hwnd);

//////////////////////////////////////////////////////////////////////////
//函数名称:  
//函数功能:  
//输入参数:  
//输出参数:  
//返 回 值:  
//备    注:  
//////////////////////////////////////////////////////////////////////////
HANDLE GuiWinTimerCreate(HWND hwnd, int id, DWORD period);

//////////////////////////////////////////////////////////////////////////
//函数名称:  
//函数功能:  
//输入参数:  
//输出参数:  
//返 回 值:  
//备    注:  
//////////////////////////////////////////////////////////////////////////
void GuiWinTimerDelete(HANDLE htimer);

//////////////////////////////////////////////////////////////////////////
//函数名称:  
//函数功能:  
//输入参数:  
//输出参数:  
//返 回 值:  
//备    注:  
//////////////////////////////////////////////////////////////////////////
DWORD GuiWinTimerTimer(HWND htimer, DWORD period);

//////////////////////////////////////////////////////////////////////////
//函数名称:  
//函数功能:  
//输入参数:  
//输出参数:  
//返 回 值:  
//备    注:  
//////////////////////////////////////////////////////////////////////////
HWND GuiHeritGetParent(HWND hchild);

//////////////////////////////////////////////////////////////////////////
//函数名称:  
//函数功能:  
//输入参数:  
//输出参数:  
//返 回 值:  
//备    注:  
//////////////////////////////////////////////////////////////////////////
HWND GuiHeritGetFirstChild(HWND hparent);

//////////////////////////////////////////////////////////////////////////
//函数名称:  
//函数功能:  
//输入参数:  
//输出参数:  
//返 回 值:  
//备    注:  
//////////////////////////////////////////////////////////////////////////
HWND GuiHeritGetNextSibling(HWND hsibling);

//////////////////////////////////////////////////////////////////////////
//函数名称:  
//函数功能:  
//输入参数:  
//输出参数:  
//返 回 值:  
//备    注:  
//////////////////////////////////////////////////////////////////////////
HWND GuiHeritGetPrevSibling(HWND hsibling);

//////////////////////////////////////////////////////////////////////////
//函数名称:  
//函数功能:  
//输入参数:  
//输出参数:  
//返 回 值:  
//备    注:  
//////////////////////////////////////////////////////////////////////////
void *GuiSetUsrPoint(HWND hwnd, void *pusr, int no);

//////////////////////////////////////////////////////////////////////////
//函数名称:  
//函数功能:  
//输入参数:  
//输出参数:  
//返 回 值:  
//备    注:  
//////////////////////////////////////////////////////////////////////////
void *GuiGetUsrPoint(HWND hwnd, int no);

//////////////////////////////////////////////////////////////////////////
//函数名称:  
//函数功能:  
//输入参数:  
//输出参数:  
//返 回 值:  
//备    注:  
//////////////////////////////////////////////////////////////////////////
int GuiMsgPutMsg(PMESSAGE msg);

//////////////////////////////////////////////////////////////////////////
//函数名称:  
//函数功能:  
//输入参数:  
//输出参数:  
//返 回 值:  
//备    注:  
//////////////////////////////////////////////////////////////////////////
int GuiMsgPollMsg(HANDLE thread, PMESSAGE msg);

//////////////////////////////////////////////////////////////////////////
//函数名称:  
//函数功能:  
//输入参数:  
//输出参数:  
//返 回 值:  
//备    注:  
//////////////////////////////////////////////////////////////////////////
int GuiMsgGetMsg(HANDLE thread, PMESSAGE msg);

//////////////////////////////////////////////////////////////////////////
//函数名称:  
//函数功能:  
//输入参数:  
//输出参数:  
//返 回 值:  
//备    注:  
//////////////////////////////////////////////////////////////////////////
int GuiMsgPutSendMsg(PMESSAGEEX msg);

//////////////////////////////////////////////////////////////////////////
//函数名称:  
//函数功能:  
//输入参数:  
//输出参数:  
//返 回 值:  
//备    注:  
//////////////////////////////////////////////////////////////////////////
int GuiMsgPollSendMsg(HANDLE thread, PMESSAGEEX msg);

//////////////////////////////////////////////////////////////////////////
//函数名称:  
//函数功能:  
//输入参数:  
//输出参数:  
//返 回 值:  
//备    注:  
//////////////////////////////////////////////////////////////////////////
int GuiMsgGetSendMsg(HANDLE thread, PMESSAGEEX msg);

//////////////////////////////////////////////////////////////////////////
//函数名称:  
//函数功能:  
//输入参数:  
//输出参数:  
//返 回 值:  
//备    注:  
//////////////////////////////////////////////////////////////////////////
int GuiMsgPutReplyMsg(PMESSAGEEX msg);

//////////////////////////////////////////////////////////////////////////
//函数名称:  
//函数功能:  
//输入参数:  
//输出参数:  
//返 回 值:  
//备    注:  
//////////////////////////////////////////////////////////////////////////
int GuiMsgGetReplyMsg(HANDLE thread, PMESSAGEEX msg);

//////////////////////////////////////////////////////////////////////////
//函数名称:  
//函数功能:  
//输入参数:  
//输出参数:  
//返 回 值:  
//备    注:  
//////////////////////////////////////////////////////////////////////////
int GuiMsgPollReplyMsg(HANDLE thread, PMESSAGEEX msg);

//////////////////////////////////////////////////////////////////////////
//函数名称:  
//函数功能:  
//输入参数:  
//输出参数:  
//返 回 值:  
//备    注:  
//////////////////////////////////////////////////////////////////////////
int GuiMsgCheck(HWND hwnd0, HWND hwnd1);

//////////////////////////////////////////////////////////////////////////
//函数名称:  
//函数功能:  
//输入参数:  
//输出参数:  
//返 回 值:  
//备    注:  
//////////////////////////////////////////////////////////////////////////
int GuiMsgDelete(HANDLE thread);

//////////////////////////////////////////////////////////////////////////
//函数名称:  
//函数功能:  
//输入参数:  
//输出参数:  
//返 回 值:  
//备    注:  
//////////////////////////////////////////////////////////////////////////
int GuiMsgModalGetMsg(HANDLE thread, HWND hmodal, PMESSAGE msg);

//////////////////////////////////////////////////////////////////////////
//函数名称:  
//函数功能:  
//输入参数:  
//输出参数:  
//返 回 值:  
//备    注:  
//////////////////////////////////////////////////////////////////////////
int GuiKeyShortcutAdd(HWND hwnd, int key);

//////////////////////////////////////////////////////////////////////////
//函数名称:  
//函数功能:  
//输入参数:  
//输出参数:  
//返 回 值:  
//备    注:  
//////////////////////////////////////////////////////////////////////////
HWND GuiKeyShortcutRedir(HWND hwnd, int key);

//////////////////////////////////////////////////////////////////////////
//函数名称:  
//函数功能:  
//输入参数:  
//输出参数:  
//返 回 值:  
//备    注:  
//////////////////////////////////////////////////////////////////////////
int GuiKeyShortcutDel(HWND hwnd, int key);

//////////////////////////////////////////////////////////////////////////
//函数名称:  
//函数功能:  
//输入参数:  
//输出参数:  
//返 回 值:  
//备    注:  
//////////////////////////////////////////////////////////////////////////
int GuiKeyIsShortcut(int key);

//////////////////////////////////////////////////////////////////////////
//函数名称: GuiKeyBindKey 
//函数功能: 将按键绑定到指定的窗体 
//输入参数: hwnd --- 窗体句柄
//输出参数:  
//返 回 值: 前一个绑定的窗体句柄 
//备    注:  
//////////////////////////////////////////////////////////////////////////
HWND GuiKeyBindKey(HWND hwnd);

//////////////////////////////////////////////////////////////////////////
//函数名称: GuiKeyUnBindKey 
//函数功能: 解除按键绑定到指定的窗体 
//输入参数:  
//输出参数:  
//返 回 值:  
//备    注:  
//////////////////////////////////////////////////////////////////////////
int GuiKeyUnBindKey(void);

//////////////////////////////////////////////////////////////////////////
//函数名称: GuiKeyGetBindKey 
//函数功能: 获得按键绑定的窗体句柄 
//输入参数:  
//输出参数:  
//返 回 值:  
//备    注:  
//////////////////////////////////////////////////////////////////////////
HWND GuiKeyGetBindKey(void);



//////////////////////////////////////////////////////////////////////////
//函数名称:  
//函数功能:  
//输入参数:  
//输出参数:  
//返 回 值:  
//备    注:  
//////////////////////////////////////////////////////////////////////////
int GuiTouchSetting(PTOUCH_KEY tpkey, int areas);

//////////////////////////////////////////////////////////////////////////
//函数名称: GuiTouchSmartEnable
//函数功能: 允许手势识别
//输入参数:  
//输出参数:  
//返 回 值:  
//备    注:  
//////////////////////////////////////////////////////////////////////////
void GuiTouchSmartEnable(void);

//////////////////////////////////////////////////////////////////////////
//函数名称: GuiTouchSmartDisable
//函数功能: 禁止手势识别
//输入参数:  
//输出参数:  
//返 回 值:  
//备    注:  
//////////////////////////////////////////////////////////////////////////
void GuiTouchSmartDisable(void);


//////////////////////////////////////////////////////////////////////////
//函数名称: GuiTouchSmartIsEnable
//函数功能: 获得手势识别标志
//输入参数:  
//输出参数:  
//返 回 值:  
//备    注:  
//////////////////////////////////////////////////////////////////////////
char GuiTouchSmartIsEnable(void);

//////////////////////////////////////////////////////////////////////////
//函数名称: GuiTouchBindTouch
//函数功能: 将触摸消息绑定到指定的窗体
//输入参数: hwnd --- 窗体句柄
//输出参数:  
//返 回 值: 前一个绑定窗体的句柄
//备    注: 使用该函数会将触摸的消息发送到指定的窗体上
//////////////////////////////////////////////////////////////////////////
HWND GuiTouchBindTouch(HWND hwnd);

//////////////////////////////////////////////////////////////////////////
//函数名称: GuiTouchUnBindTouch 
//函数功能: 解除触摸消息绑定到指定的窗体 
//输入参数:  
//输出参数:  
//返 回 值:  
//备    注:  
//////////////////////////////////////////////////////////////////////////
int GuiTouchUnBindTouch(void);

//////////////////////////////////////////////////////////////////////////
//函数名称: GuiTouchGetBindTouch 
//函数功能: 获得触摸消息绑定的窗体句柄 
//输入参数:  
//输出参数:  
//返 回 值:  
//备    注:  
//////////////////////////////////////////////////////////////////////////
HWND GuiTouchGetBindTouch(void);


//////////////////////////////////////////////////////////////////////////
//函数名称:  
//函数功能:  
//输入参数:  
//输出参数:  
//返 回 值:  
//备    注:  
//////////////////////////////////////////////////////////////////////////
int GuiGridShortcutAdd(HWND hwnd, PRECT area);

//////////////////////////////////////////////////////////////////////////
//函数名称:  
//函数功能:  
//输入参数:  
//输出参数:  
//返 回 值:  
//备    注:  
//////////////////////////////////////////////////////////////////////////
HWND GuiGridShortcutRedir(HWND hwnd, PRECT area);

//////////////////////////////////////////////////////////////////////////
//函数名称:  
//函数功能:  
//输入参数:  
//输出参数:  
//返 回 值:  
//备    注:  
//////////////////////////////////////////////////////////////////////////
int GuiGridShortcutDel(HWND hwnd, PRECT area);

//////////////////////////////////////////////////////////////////////////
//函数名称:  
//函数功能:  
//输入参数:  
//输出参数:  
//返 回 值:  
//备    注:  
//////////////////////////////////////////////////////////////////////////
int GuiGridIsShortcut(PRECT area);

//////////////////////////////////////////////////////////////////////////
//函数名称:  
//函数功能:  
//输入参数:  
//输出参数:  
//返 回 值:  
//备    注:  
//////////////////////////////////////////////////////////////////////////
int GuiQuitRequest(HWND hquit, HWND hrequest, int data);

//////////////////////////////////////////////////////////////////////////
//函数名称:  
//函数功能:  
//输入参数:  
//输出参数:  
//返 回 值:  
//备    注:  
//////////////////////////////////////////////////////////////////////////
int GuiQuitAnswerWait(HWND hwnd, int data);

//////////////////////////////////////////////////////////////////////////
//函数名称:  
//函数功能:  
//输入参数:  
//输出参数:  
//返 回 值:  
//备    注:  
//////////////////////////////////////////////////////////////////////////
int GuiQuitAnswerCancel(HWND hwnd, int data);

//////////////////////////////////////////////////////////////////////////
//函数名称:  
//函数功能:  
//输入参数:  
//输出参数:  
//返 回 值:  
//备    注:  
//////////////////////////////////////////////////////////////////////////
int WinObjWaitDel(HWND hwnd, int tmout);

//////////////////////////////////////////////////////////////////////////
//函数名称:  
//函数功能:  
//输入参数:  
//输出参数:  
//返 回 值:  
//备    注:  
//////////////////////////////////////////////////////////////////////////
HWND WinObjCreate(RECT *r, HWND hparent, DWORD style, HANDLE thread);

//////////////////////////////////////////////////////////////////////////
//函数名称:  
//函数功能:  
//输入参数:  
//输出参数:  
//返 回 值:  
//备    注:  
//////////////////////////////////////////////////////////////////////////
void WinObjDelete(HWND hwnd);

//////////////////////////////////////////////////////////////////////////
//函数名称:  
//函数功能:  
//输入参数:  
//输出参数:  
//返 回 值:  
//备    注:  
//////////////////////////////////////////////////////////////////////////
void WinObjSetCallback(HWND hwnd, WIN_CALLBACK cb);

//////////////////////////////////////////////////////////////////////////
//函数名称:  
//函数功能:  
//输入参数:  
//输出参数:  
//返 回 值:  
//备    注:  
//////////////////////////////////////////////////////////////////////////
WIN_CALLBACK WinObjGetCallback(HWND hwnd);

//////////////////////////////////////////////////////////////////////////
//函数名称:  
//函数功能:  
//输入参数:  
//输出参数:  
//返 回 值:  
//备    注:  
//////////////////////////////////////////////////////////////////////////
HWND WinObjSetIme(HWND hwnd, HWND hime);

//////////////////////////////////////////////////////////////////////////
//函数名称:  
//函数功能:  
//输入参数:  
//输出参数:  
//返 回 值:  
//备    注:  
//////////////////////////////////////////////////////////////////////////
HWND WinObjGetIme(HWND hwnd);

//////////////////////////////////////////////////////////////////////////
//函数名称:  
//函数功能:  
//输入参数:  
//输出参数:  
//返 回 值:  
//备    注:  
//////////////////////////////////////////////////////////////////////////
int MsgDispatch(PMESSAGE msg);

//////////////////////////////////////////////////////////////////////////
//函数名称:  
//函数功能:  
//输入参数:  
//输出参数:  
//返 回 值:  
//备    注:  
//////////////////////////////////////////////////////////////////////////
int MsgSend(PMESSAGE msg);

//////////////////////////////////////////////////////////////////////////
//函数名称:  
//函数功能:  
//输入参数:  
//输出参数:  
//返 回 值:  
//备    注:  
//////////////////////////////////////////////////////////////////////////
int MsgSendNoData(DWORD msgid);

//////////////////////////////////////////////////////////////////////////
//函数名称:  
//函数功能:  
//输入参数:  
//输出参数:  
//返 回 值:  
//备    注:  
//////////////////////////////////////////////////////////////////////////
int MsgPost(PMESSAGE msg);

//////////////////////////////////////////////////////////////////////////
//函数名称:  
//函数功能:  
//输入参数:  
//输出参数:  
//返 回 值:  
//备    注:  
//////////////////////////////////////////////////////////////////////////
int MsgGet(PMESSAGE msg);

//////////////////////////////////////////////////////////////////////////
//函数名称:  
//函数功能:  
//输入参数:  
//输出参数:  
//返 回 值:  
//备    注:  
//////////////////////////////////////////////////////////////////////////
int ModalMsgGet(HWND hmodal, PMESSAGE msg);

//////////////////////////////////////////////////////////////////////////
//函数名称:  
//函数功能:  
//输入参数:  
//输出参数:  
//返 回 值:  
//备    注:  
//////////////////////////////////////////////////////////////////////////
void GdiGetClipRect(HWND hwnd, PWRECT rect);

//////////////////////////////////////////////////////////////////////////
//函数名称:  
//函数功能:  
//输入参数:  
//输出参数:  
//返 回 值:  
//备    注:  
//////////////////////////////////////////////////////////////////////////
void GdiSetClipRect(HWND hwnd, PWRECT rect);

//////////////////////////////////////////////////////////////////////////
//函数名称:  
//函数功能:  
//输入参数:  
//输出参数:  
//返 回 值:  
//备    注:  
//////////////////////////////////////////////////////////////////////////
int GdiBeginPaint(HWND hwnd);

//////////////////////////////////////////////////////////////////////////
//函数名称:  
//函数功能:  
//输入参数:  
//输出参数:  
//返 回 值:  
//备    注:  
//////////////////////////////////////////////////////////////////////////
int GdiEndPaint(HWND hwnd);

//////////////////////////////////////////////////////////////////////////
//函数名称:  
//函数功能:  
//输入参数:  
//输出参数:  
//返 回 值:  
//备    注:  
//////////////////////////////////////////////////////////////////////////
void *GdiSetUserDc(HWND hwnd, void *dc);

//////////////////////////////////////////////////////////////////////////
//函数名称:  
//函数功能:  
//输入参数:  
//输出参数:  
//返 回 值:  
//备    注:  
//////////////////////////////////////////////////////////////////////////
void *GdiGetUserDc(HWND hwnd);

//////////////////////////////////////////////////////////////////////////
//函数名称:  
//函数功能:  
//输入参数:  
//输出参数:  
//返 回 值:  
//备    注:  
//////////////////////////////////////////////////////////////////////////
PINDEX WinGrGetPixel(HWND hwnd, int x, int y);

//////////////////////////////////////////////////////////////////////////
//函数名称:  
//函数功能:  
//输入参数:  
//输出参数:  
//返 回 值:  
//备    注:  
//////////////////////////////////////////////////////////////////////////
void WinGrDrawPixel(HWND hwnd, int x, int y);

//////////////////////////////////////////////////////////////////////////
//函数名称:  
//函数功能:  
//输入参数:  
//输出参数:  
//返 回 值:  
//备    注:  
//////////////////////////////////////////////////////////////////////////
void WinGrDrawHLine(HWND hwnd, int x, int y, int w);

//////////////////////////////////////////////////////////////////////////
//函数名称:  
//函数功能:  
//输入参数:  
//输出参数:  
//返 回 值:  
//备    注:  
//////////////////////////////////////////////////////////////////////////
void WinGrDrawVLine(HWND hwnd, int x, int y, int h);

//////////////////////////////////////////////////////////////////////////
//函数名称:  
//函数功能:  
//输入参数:  
//输出参数:  
//返 回 值:  
//备    注:  
//////////////////////////////////////////////////////////////////////////
void WinGrDrawBLine(HWND hwnd, int x, int y, PDIB_LINE line);

//////////////////////////////////////////////////////////////////////////
//函数名称:  
//函数功能:  
//输入参数:  
//输出参数:  
//返 回 值:  
//备    注:  
//////////////////////////////////////////////////////////////////////////
void WinGrDrawRect(HWND hwnd, PRECT r);

//////////////////////////////////////////////////////////////////////////
//函数名称:  
//函数功能:  
//输入参数:  
//输出参数:  
//返 回 值:  
//备    注:  
//////////////////////////////////////////////////////////////////////////
void WinGrFillRect(HWND hwnd, PRECT r);

//////////////////////////////////////////////////////////////////////////
//函数名称:  
//函数功能:  
//输入参数:  
//输出参数:  
//返 回 值:  
//备    注:  
//////////////////////////////////////////////////////////////////////////
void WinGrDrawChar(HWND hwnd, BYTE* data, int bpl, PRECT r);

#ifdef CONFIG_MAINLCD_ICON_ENABLE
void WinGrIconOff(HWND hwnd, int icon);
void WinGrIconOn(HWND hwnd, int icon);
#endif

PINDEX WinGrColor2Index(HWND hwnd, COLOR c);
COLOR WinGrIndex2Color(HWND hwnd, PINDEX i);


//////////////////////////////////////////////////////////////////////////
//函数名称:  
//函数功能:  
//输入参数:  
//输出参数:  
//返 回 值:  
//备    注:  
//////////////////////////////////////////////////////////////////////////
int WinGrSetDrawMode(HWND hwnd, int mode);

//////////////////////////////////////////////////////////////////////////
//函数名称:  
//函数功能:  
//输入参数:  
//输出参数:  
//返 回 值:  
//备    注:  
//////////////////////////////////////////////////////////////////////////
int WinGrGetDrawMode(HWND hwnd);

//////////////////////////////////////////////////////////////////////////
//函数名称:  
//函数功能:  
//输入参数:  
//输出参数:  
//返 回 值:  
//备    注:  
//////////////////////////////////////////////////////////////////////////
COLOR WinGrSetBgColor(HWND hwnd, COLOR c);

//////////////////////////////////////////////////////////////////////////
//函数名称:  
//函数功能:  
//输入参数:  
//输出参数:  
//返 回 值:  
//备    注:  
//////////////////////////////////////////////////////////////////////////
COLOR WinGrGetBgColor(HWND hwnd);

//////////////////////////////////////////////////////////////////////////
//函数名称:  
//函数功能:  
//输入参数:  
//输出参数:  
//返 回 值:  
//备    注:  
//////////////////////////////////////////////////////////////////////////
COLOR WinGrSetFgColor(HWND hwnd, COLOR c);

//////////////////////////////////////////////////////////////////////////
//函数名称:  
//函数功能:  
//输入参数:  
//输出参数:  
//返 回 值:  
//备    注:  
//////////////////////////////////////////////////////////////////////////
COLOR WinGrGetFgColor(HWND hwnd);

//////////////////////////////////////////////////////////////////////////
//函数名称:  
//函数功能:  
//输入参数:  
//输出参数:  
//返 回 值:  
//备    注:  
//////////////////////////////////////////////////////////////////////////
HANDLE FontLoadRom(PROM_FONT fnt);

//////////////////////////////////////////////////////////////////////////
//函数名称:  
//函数功能:  
//输入参数:  
//输出参数:  
//返 回 值:  
//备    注:  
//////////////////////////////////////////////////////////////////////////
HANDLE FontLoadFile(const char *name, int fontoff);

//////////////////////////////////////////////////////////////////////////
//函数名称:  
//函数功能:  
//输入参数:  
//输出参数:  
//返 回 值:  
//备    注:  
//////////////////////////////////////////////////////////////////////////
HANDLE FontLoadTtf(const char *name);

//////////////////////////////////////////////////////////////////////////
//函数名称:  
//函数功能:  
//输入参数:  
//输出参数:  
//返 回 值:  
//备    注:  
//////////////////////////////////////////////////////////////////////////
int FontUnload(HANDLE hfnt);

//////////////////////////////////////////////////////////////////////////
//函数名称:  
//函数功能:  
//输入参数:  
//输出参数:  
//返 回 值:  
//备    注:  
//////////////////////////////////////////////////////////////////////////
int FontInfoGet(PFONT_INFO pinfo, int max);

//////////////////////////////////////////////////////////////////////////
//函数名称:  
//函数功能:  
//输入参数:  
//输出参数:  
//返 回 值:  
//备    注:  
//////////////////////////////////////////////////////////////////////////
HANDLE FontOpen(HWND hwnd, const char *name);

//////////////////////////////////////////////////////////////////////////
//函数名称:  
//函数功能:  
//输入参数:  
//输出参数:  
//返 回 值:  
//备    注:  
//////////////////////////////////////////////////////////////////////////
void FontClose(HANDLE hfont);

//////////////////////////////////////////////////////////////////////////
//函数名称:  
//函数功能:  
//输入参数:  
//输出参数:  
//返 回 值:  
//备    注:  
//////////////////////////////////////////////////////////////////////////
int FontCheck(HANDLE hfont);

//////////////////////////////////////////////////////////////////////////
//函数名称:  
//函数功能:  
//输入参数:  
//输出参数:  
//返 回 值:  
//备    注:  
//////////////////////////////////////////////////////////////////////////
int FontGetName(HANDLE hfont, char *name, int max);

//////////////////////////////////////////////////////////////////////////
//函数名称:  
//函数功能:  
//输入参数:  
//输出参数:  
//返 回 值:  
//备    注:  
//////////////////////////////////////////////////////////////////////////
int FontTtfProperty(HANDLE hfont, int size, int italy, int bold);

//////////////////////////////////////////////////////////////////////////
//函数名称:  
//函数功能:  
//输入参数:  
//输出参数:  
//返 回 值:  
//备    注:  
//////////////////////////////////////////////////////////////////////////
int FontGetCharBitmap(HANDLE hfont, BYTE* s, PCHAR_BITMAP bitmap, int bufmax);

//////////////////////////////////////////////////////////////////////////
//函数名称:  
//函数功能:  
//输入参数:  
//输出参数:  
//返 回 值:  
//备    注:  
//////////////////////////////////////////////////////////////////////////
int FontGetCharInfo(HANDLE hfont, BYTE* s, int* width, int max);

//////////////////////////////////////////////////////////////////////////
//函数名称:  
//函数功能:  
//输入参数:  
//输出参数:  
//返 回 值:  
//备    注:  
//////////////////////////////////////////////////////////////////////////
int FontCharOut(HANDLE hfont, BYTE *s, POINT *pos, int max);

//////////////////////////////////////////////////////////////////////////
//函数名称:  
//函数功能:  
//输入参数:  
//输出参数:  
//返 回 值:  
//备    注:  
//////////////////////////////////////////////////////////////////////////
int FontGetWordInfo(HANDLE hfont, BYTE* s, int* width, int max);

//////////////////////////////////////////////////////////////////////////
//函数名称:  
//函数功能:  
//输入参数:  
//输出参数:  
//返 回 值:  
//备    注:  
//////////////////////////////////////////////////////////////////////////
int FontWordOut(HANDLE hfont, BYTE *s, POINT *pos, int max);

//////////////////////////////////////////////////////////////////////////
//函数名称:  
//函数功能:  
//输入参数:  
//输出参数:  
//返 回 值:  
//备    注:  
//////////////////////////////////////////////////////////////////////////
int FontGetStrInfo(HANDLE hfont, BYTE* s, int* width, int max);

//////////////////////////////////////////////////////////////////////////
//函数名称:  
//函数功能:  
//输入参数:  
//输出参数:  
//返 回 值:  
//备    注:  
//////////////////////////////////////////////////////////////////////////
int FontStrOut(HANDLE hfont, BYTE *s, POINT *pos, int max);

//////////////////////////////////////////////////////////////////////////
//函数名称:  
//函数功能:  
//输入参数:  
//输出参数:  
//返 回 值:  
//备    注:  
//////////////////////////////////////////////////////////////////////////
int FontIsInFont(HANDLE hfont, BYTE *s);

//////////////////////////////////////////////////////////////////////////
//函数名称:  
//函数功能:  
//输入参数:  
//输出参数:  
//返 回 值:  
//备    注:  
//////////////////////////////////////////////////////////////////////////
int FontDisplayHeight(HANDLE hfont);


//////////////////////////////////////////////////////////////////////////
//函数名称:  
//函数功能:  
//输入参数:  
//输出参数:  
//返 回 值:  
//备    注:  
//////////////////////////////////////////////////////////////////////////
int DefMsgProc(MESSAGE* pmsg);

//////////////////////////////////////////////////////////////////////////
//函数名称:  
//函数功能:  
//输入参数:  
//输出参数:  
//返 回 值:  
//备    注:  
//////////////////////////////////////////////////////////////////////////
HWND NewWindow(int x, int y, int w, int h, HWND hparent,
			   DWORD style, WIN_CALLBACK cb, int extra);

//////////////////////////////////////////////////////////////////////////
//函数名称:  
//函数功能:  
//输入参数:  
//输出参数:  
//返 回 值:  
//备    注:  
//////////////////////////////////////////////////////////////////////////
HWND RegisterWindow(int x, int y, int w, int h, HWND hparent,
					DWORD style, WIN_CALLBACK cb, int extra);

//////////////////////////////////////////////////////////////////////////
//函数名称:  
//函数功能:  
//输入参数:  
//输出参数:  
//返 回 值:  
//备    注:  
//////////////////////////////////////////////////////////////////////////
int ModalWindow(int x, int y, int w, int h, HWND hparent,
				DWORD style, WIN_CALLBACK cb, void *p, int size);


//////////////////////////////////////////////////////////////////////////
//函数名称:  
//函数功能:  
//输入参数:  
//输出参数:  
//返 回 值:  
//备    注:  
//////////////////////////////////////////////////////////////////////////
int RtcGetDate(DATE *date);

//////////////////////////////////////////////////////////////////////////
//函数名称:  
//函数功能:  
//输入参数:  
//输出参数:  
//返 回 值:  
//备    注:  
//////////////////////////////////////////////////////////////////////////
int RtcGetTime(TIME *time);

//////////////////////////////////////////////////////////////////////////
//函数名称:  
//函数功能:  
//输入参数:  
//输出参数:  
//返 回 值:  
//备    注:  
//////////////////////////////////////////////////////////////////////////
int RtcGetAlarm(ALARM_DT *alarm);

//////////////////////////////////////////////////////////////////////////
//函数名称:  
//函数功能:  
//输入参数:  
//输出参数:  
//返 回 值:  
//备    注:  
//////////////////////////////////////////////////////////////////////////
int RtcSetDate(DATE date);

//////////////////////////////////////////////////////////////////////////
//函数名称:  
//函数功能:  
//输入参数:  
//输出参数:  
//返 回 值:  
//备    注:  
//////////////////////////////////////////////////////////////////////////
int RtcSetTime(TIME time);

//////////////////////////////////////////////////////////////////////////
//函数名称:  
//函数功能:  
//输入参数:  
//输出参数:  
//返 回 值:  
//备    注:  
//////////////////////////////////////////////////////////////////////////
int RtcSetAlarm(ALARM_DT alarm);

//////////////////////////////////////////////////////////////////////////
//函数名称:  
//函数功能:  
//输入参数:  
//输出参数:  
//返 回 值:  
//备    注:  
//////////////////////////////////////////////////////////////////////////
int RtcAlarmEna(void);

//////////////////////////////////////////////////////////////////////////
//函数名称:  
//函数功能:  
//输入参数:  
//输出参数:  
//返 回 值:  
//备    注:  
//////////////////////////////////////////////////////////////////////////
int RtcAlarmDis(void);


//////////////////////////////////////////////////////////////////////////
//函数名称:  
//函数功能:  
//输入参数:  
//输出参数:  
//返 回 值:  
//备    注:  
//////////////////////////////////////////////////////////////////////////
int UartPrint(const char *buf);


//////////////////////////////////////////////////////////////////////////
//函数名称:  
//函数功能:  
//输入参数:  
//输出参数:  
//返 回 值:  
//备    注:  
//////////////////////////////////////////////////////////////////////////
HWND DevCheckTrustee(HWND hwnd);

//////////////////////////////////////////////////////////////////////////
//函数名称:  DevCheckVoltageValve
//函数功能:  设置低电电压和低电关机电压
//输入参数:  lowvoltage --- 低电提示电压值
//输出参数:  poweroffvoltage --- 低电关机电压值
//返 回 值:  低电提示电压值
//备    注:  
//////////////////////////////////////////////////////////////////////////
int DevCheckVoltageValve(int lowvoltage, int poweroffvoltage);

//////////////////////////////////////////////////////////////////////////
//函数名称:  
//函数功能:  
//输入参数:  
//输出参数:  
//返 回 值:  
//备    注:  
//////////////////////////////////////////////////////////////////////////
HWND DevCheckSetMsgPost(HWND hwnd, DWORD msgid);

//////////////////////////////////////////////////////////////////////////
//函数名称:  
//函数功能:  
//输入参数:  
//输出参数:  
//返 回 值:  
//备    注:  
//////////////////////////////////////////////////////////////////////////
int DevCheckAutoOffSet(int minute);

//////////////////////////////////////////////////////////////////////////
//函数名称:  
//函数功能:  
//输入参数:  
//输出参数:  
//返 回 值:  
//备    注:  
//////////////////////////////////////////////////////////////////////////
int DevCheckAutoOffGet(int *count);

//////////////////////////////////////////////////////////////////////////
//函数名称:  
//函数功能:  
//输入参数:  
//输出参数:  
//返 回 值:  
//备    注:  
//////////////////////////////////////////////////////////////////////////
int DevCheckBacklightOffSet(int minute);

//////////////////////////////////////////////////////////////////////////
//函数名称:  
//函数功能:  
//输入参数:  
//输出参数:  
//返 回 值:  
//备    注:  
//////////////////////////////////////////////////////////////////////////
int DevCheckBacklightOffGet(void);

//////////////////////////////////////////////////////////////////////////
//函数名称:  
//函数功能:  
//输入参数:  
//输出参数:  
//返 回 值:  
//备    注:  
//////////////////////////////////////////////////////////////////////////
int DevCheckForceOffSet(int minute);

//////////////////////////////////////////////////////////////////////////
//函数名称:  
//函数功能:  
//输入参数:  
//输出参数:  
//返 回 值:  
//备    注:  
//////////////////////////////////////////////////////////////////////////
int DevCheckForceOffGet(void);

//////////////////////////////////////////////////////////////////////////
//函数名称:  
//函数功能:  
//输入参数:  
//输出参数:  
//返 回 值:  
//备    注:  
//////////////////////////////////////////////////////////////////////////
int SleepEnterRequest(int mode);

//////////////////////////////////////////////////////////////////////////
//函数名称:  
//函数功能:  
//输入参数:  
//输出参数:  
//返 回 值:  
//备    注:  
//////////////////////////////////////////////////////////////////////////
int SleepEnterConfirm(HWND hwnd);

//////////////////////////////////////////////////////////////////////////
//函数名称:  
//函数功能:  
//输入参数:  
//输出参数:  
//返 回 值:  
//备    注:  
//////////////////////////////////////////////////////////////////////////
int SleepExitRequest(int mode);

//////////////////////////////////////////////////////////////////////////
//函数名称:  
//函数功能:  
//输入参数:  
//输出参数:  
//返 回 值:  
//备    注:  
//////////////////////////////////////////////////////////////////////////
int SleepExitConfirm(HWND hwnd);

//////////////////////////////////////////////////////////////////////////
//函数名称:  
//函数功能:  
//输入参数:  
//输出参数:  
//返 回 值:  
//备    注:  
//////////////////////////////////////////////////////////////////////////
int SleepLogoOffQuit(void);

//////////////////////////////////////////////////////////////////////////
//函数名称:  
//函数功能:  
//输入参数:  
//输出参数:  
//返 回 值:  
//备    注:  
//////////////////////////////////////////////////////////////////////////
int SleepLogoOnQuit(void);

//////////////////////////////////////////////////////////////////////////
//函数名称: LogoHandleRegister
//函数功能: 注册开关机处理程序 
//输入参数: type --- 类型(0:手动关机,1:开机,2:自动关机) 
//输入参数: program --- 程序名称(最大长度64) 
//输入参数: cmdline --- 命令行(最大长度32) 
//输出参数:  
//返 回 值:  
//备    注: 小机使用 
//////////////////////////////////////////////////////////////////////////
void LogoHandleRegister(char type, const char* program, const char *cmdline);

//////////////////////////////////////////////////////////////////////////
//函数名称: SimLogoHandleRegister
//函数功能: 注册开关机处理程序 
//输入参数: type --- 类型(0:手动关机,1:开机,2:自动关机) 
//输入参数: program --- 程序名称(最大长度64) 
//输入参数: cmdline --- 命令行(最大长度32) 
//输入参数: entry --- 入口函数 
//输出参数:  
//返 回 值:  
//备    注: 模拟器使用 
//////////////////////////////////////////////////////////////////////////
void SimLogoHandleRegister(char type, const char* program, const char *cmdline, int(*entry)(int, int, int, char**));

//////////////////////////////////////////////////////////////////////////
//函数名称:  
//函数功能:  
//输入参数:  
//输出参数:  
//返 回 值:  
//备    注:  
//////////////////////////////////////////////////////////////////////////
HANDLE AlarmCreate(const char *name, const char *wakeapp);

//////////////////////////////////////////////////////////////////////////
//函数名称:  
//函数功能:  
//输入参数:  
//输出参数:  
//返 回 值:  
//备    注:  
//////////////////////////////////////////////////////////////////////////
int AlarmDestroy(HANDLE alarm, const char *name);

//////////////////////////////////////////////////////////////////////////
//函数名称:  
//函数功能:  
//输入参数:  
//输出参数:  
//返 回 值:  
//备    注:  
//////////////////////////////////////////////////////////////////////////
int AlarmRead(HANDLE alarm, const char *name, PALARM time);

//////////////////////////////////////////////////////////////////////////
//函数名称:  
//函数功能:  
//输入参数:  
//输出参数:  
//返 回 值:  
//备    注:  
//////////////////////////////////////////////////////////////////////////
int AlarmWrite(HANDLE alarm, const char *name, PALARM time);

//////////////////////////////////////////////////////////////////////////
//函数名称:  
//函数功能:  
//输入参数:  
//输出参数:  
//返 回 值:  
//备    注:  
//////////////////////////////////////////////////////////////////////////
int ShareVarCreate(int size);

//////////////////////////////////////////////////////////////////////////
//函数名称:  
//函数功能:  
//输入参数:  
//输出参数:  
//返 回 值:  
//备    注:  
//////////////////////////////////////////////////////////////////////////
int ShareVarWrite(int offset, int data);

//////////////////////////////////////////////////////////////////////////
//函数名称:  
//函数功能:  
//输入参数:  
//输出参数:  
//返 回 值:  
//备    注:  
//////////////////////////////////////////////////////////////////////////
int	ShareVarRead(int offset);

//////////////////////////////////////////////////////////////////////////
//函数名称:  
//函数功能:  
//输入参数:  
//输出参数:  
//返 回 值:  
//备    注:  
//////////////////////////////////////////////////////////////////////////
int BurnLoad(const char *mac, const char *idexfile, const char *datafile);

//////////////////////////////////////////////////////////////////////////
//函数名称:  
//函数功能:  
//输入参数:  
//输出参数:  
//返 回 值:  
//备    注:  
//////////////////////////////////////////////////////////////////////////
void BurnUnload(void);

//////////////////////////////////////////////////////////////////////////
//函数名称:  
//函数功能:  
//输入参数:  
//输出参数:  
//返 回 值:  
//备    注:  
//////////////////////////////////////////////////////////////////////////
void BurnRun(void);

//////////////////////////////////////////////////////////////////////////
//函数名称:  
//函数功能:  
//输入参数:  
//输出参数:  
//返 回 值:  
//备    注:  
//////////////////////////////////////////////////////////////////////////
int BurnIsCompleted(void);

//////////////////////////////////////////////////////////////////////////
//函数名称:  
//函数功能:  
//输入参数:  
//输出参数:  
//返 回 值:  
//备    注:  
//////////////////////////////////////////////////////////////////////////
int BurnGetStage(int *percent, int *cur, int *totals);

//////////////////////////////////////////////////////////////////////////
//函数名称:  
//函数功能:  
//输入参数:  
//输出参数:  
//返 回 值:  
//备    注:  
//////////////////////////////////////////////////////////////////////////
BYTE *BurnGetMsg(BYTE *outstr, int *len);

//////////////////////////////////////////////////////////////////////////
//函数名称:  
//函数功能:  
//输入参数:  
//输出参数:  
//返 回 值:  
//备    注:  
//////////////////////////////////////////////////////////////////////////
int ApManGetCreate(char *name, int max);

//////////////////////////////////////////////////////////////////////////
//函数名称:  
//函数功能:  
//输入参数:  
//输出参数:  
//返 回 值:  
//备    注:  
//////////////////////////////////////////////////////////////////////////
int ApManGetDestroy(char *name, int max);


//////////////////////////////////////////////////////////////////////////
//函数名称:  
//函数功能:  
//输入参数:  
//输出参数:  
//返 回 值:  
//备    注:  
//////////////////////////////////////////////////////////////////////////
void ProbePinOpen(void);

//////////////////////////////////////////////////////////////////////////
//函数名称:  
//函数功能:  
//输入参数:  
//输出参数:  
//返 回 值:  
//备    注:  
//////////////////////////////////////////////////////////////////////////
void ProbePinClose(void);

//////////////////////////////////////////////////////////////////////////
//函数名称:  
//函数功能:  
//输入参数:  
//输出参数:  
//返 回 值:  
//备    注:  
//////////////////////////////////////////////////////////////////////////
int ProbePinFlp(void);

//////////////////////////////////////////////////////////////////////////
//函数名称:  
//函数功能:  
//输入参数:  
//输出参数:  
//返 回 值:  
//备    注:  
//////////////////////////////////////////////////////////////////////////
int ProbePinOut(int lvl);

//////////////////////////////////////////////////////////////////////////
//函数名称:  
//函数功能:  
//输入参数:  
//输出参数:  
//返 回 值:  
//备    注:  
//////////////////////////////////////////////////////////////////////////
int ProbePinGet(void);

int ATPlayStart(char *path);
int ATPlayEnd(void);
int ATRecordStart(char *path);
int ATRecordEnd(void);
int ATReadMessage(void *mbuf, unsigned long *stamp);
int ATWriteMessage(void *mbuf, unsigned long stamp);
int ATGetRepeatCounter(void);

void* uPoolCreate(DWORD poolsize, UPOOL_DEBUGINFO *info);
int uPoolDestroy(void *p);
void uPoolInfo(DWORD *totalsize, DWORD *usedsize, DWORD *freesize);
void uPoolDebugSet(UPOOL_DEBUGINFO *info);
void uPoolPrintAllItem(void);
void uPoolPrintAllFreeItem(void);
void ufree(void *p);
void *umalloc(int size);
void * KernMemcpy(void *dst, const void *src, size_t count);

#include <noahos/guiv1.h>

#endif // _NOAHOS_V2_H
